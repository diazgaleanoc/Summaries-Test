{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/book-data.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = function () {\n  return [\"/books\"];\n};\nexport let UpdateBookComponent = /*#__PURE__*/(() => {\n  class UpdateBookComponent {\n    constructor(service, route, router, fb) {\n      this.service = service;\n      this.route = route;\n      this.router = router;\n      this.fb = fb;\n      this.updateBookForm = {};\n      this.book = {};\n      this.service.getBookById(this.route.snapshot.params.id).subscribe(data => {\n        this.book = data;\n        this.updateBookForm = this.fb.group({\n          id: [data.id],\n          title: [data.title, Validators.required],\n          author: [data.author, Validators.required],\n          description: [data.description, Validators.compose([Validators.required, Validators.minLength(30)])],\n          rate: [data.rate],\n          dateStart: [this.formatDate(data.dateStart)],\n          dateRead: [this.formatDate(data.dateRead)]\n        });\n      });\n    }\n    formatDate(date) {\n      if (date) {\n        return new Date(date).toISOString().substring(0, 10);\n      }\n      return null;\n    }\n    onSubmit() {\n      this.service.updateBook(this.updateBookForm.value).subscribe(data => {\n        this.router.navigate(['/books']);\n      });\n    }\n  }\n  UpdateBookComponent.ɵfac = function UpdateBookComponent_Factory(t) {\n    return new (t || UpdateBookComponent)(i0.ɵɵdirectiveInject(i1.BookDataService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  UpdateBookComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateBookComponent,\n    selectors: [[\"app-update-book\"]],\n    inputs: {\n      updateBookForm: \"updateBookForm\"\n    },\n    decls: 34,\n    vars: 3,\n    consts: [[1, \"update-book\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"title\", 1, \"required\"], [\"type\", \"text\", \"id\", \"title\", \"formControlName\", \"title\", \"placeholder\", \"Book Title\", 1, \"form-control\"], [\"for\", \"author\", 1, \"required\"], [\"type\", \"text\", \"id\", \"author\", \"formControlName\", \"author\", \"placeholder\", \"Book Author\", 1, \"form-control\"], [\"for\", \"description\", 1, \"required\"], [\"type\", \"text\", \"id\", \"description\", \"formControlName\", \"description\", \"placeholder\", \"Book Description\", 1, \"form-control\"], [1, \"row\"], [1, \"col-md-4\", \"col-xs-4\", \"col-sm-4\"], [\"for\", \"dateStart\"], [\"type\", \"date\", \"id\", \"dateStart\", \"formControlName\", \"dateStart\", \"placeholder\", \"Date Start\", 1, \"form-control\"], [1, \"form-froup\"], [\"for\", \"dateRead\"], [\"type\", \"date\", \"id\", \"dateRead\", \"formControlName\", \"dateRead\", \"placeholder\", \"Date Read\", 1, \"form-control\"], [\"for\", \"rate\"], [\"type\", \"number\", \"min\", \"0\", \"max\", \"5\", \"id\", \"rate\", \"formControlName\", \"rate\", \"placeholder\", \"Rate\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\"], [1, \"btn\", \"btn-default\", 3, \"routerLink\"]],\n    template: function UpdateBookComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function UpdateBookComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"label\", 3);\n        i0.ɵɵtext(4, \"Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 2)(7, \"label\", 5);\n        i0.ɵɵtext(8, \"Author\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 7);\n        i0.ɵɵtext(12, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"textarea\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 9)(15, \"div\", 10)(16, \"div\", 2)(17, \"label\", 11);\n        i0.ɵɵtext(18, \"Date Start\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 10)(21, \"div\", 13)(22, \"label\", 14);\n        i0.ɵɵtext(23, \"Date Read\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"input\", 15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(25, \"div\", 10)(26, \"div\", 2)(27, \"label\", 16);\n        i0.ɵɵtext(28, \"Rate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"input\", 17);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(30, \"button\", 18);\n        i0.ɵɵtext(31, \"Update Book\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"button\", 19);\n        i0.ɵɵtext(33, \"Cancel\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.updateBookForm);\n        i0.ɵɵadvance(31);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(2, _c0));\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.MinValidator, i3.MaxValidator, i3.FormGroupDirective, i3.FormControlName, i2.RouterLink],\n    styles: [\".update-book[_ngcontent-%COMP%]{padding:0 20%}.required[_ngcontent-%COMP%]:after{content:\\\"*\\\";color:red}\"]\n  });\n  return UpdateBookComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}